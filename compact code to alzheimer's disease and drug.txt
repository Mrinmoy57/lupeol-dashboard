import plotly.graph_objects as go
import networkx as nx
import pandas as pd
from pyspark.sql import SparkSession

# Create a Spark Session
spark = SparkSession.builder \
    .appName("Drug Design Prediction") \
    .getOrCreate()

# Sample data for drug formulation and prediction
drug_data = [
    {
        "Plant": "Boerhavia",
        "Plant Part": "Root",
        "Phytochemical": "Boeravinone D",
        "Target Molecule": "Bace1",
        "Target Disease": "Alzheimer",
        "Dosage for Children (mg)": 5,
        "Dosage for Adults (mg)": 10,
        "Temperature (Â°C)": 37,
        "pH": 7.4,
        "Shelf Life (months)": 24,
        "Drug Efficacy (% In vivo)": 85,
        "Side Effects": "Nausea, Headache",
        "Drug Delivery Pathway": "Oral",
    }
]

# Create DataFrame
drug_df = spark.createDataFrame(drug_data)

# Testing results data
testing_results_data = [
    {"Model": "Logistic Regression", "Accuracy": 0.85, "Precision": 0.80, "Recall": 0.75, "F1 Score": 0.77},
    {"Model": "Random Forest", "Accuracy": 0.90, "Precision": 0.85, "Recall": 0.80, "F1 Score": 0.82},
    {"Model": "Gradient Boosting", "Accuracy": 0.92, "Precision": 0.88, "Recall": 0.85, "F1 Score": 0.86},
    {"Model": "Support Vector Machine", "Accuracy": 0.87, "Precision": 0.84, "Recall": 0.78, "F1 Score": 0.81},
    {"Model": "Neural Network", "Accuracy": 0.93, "Precision": 0.89, "Recall": 0.86, "F1 Score": 0.87},
]

# Create DataFrame for testing results
testing_results_df = pd.DataFrame(testing_results_data)

# Function to create the pathway diagram
def create_pathway_diagram():
    G = nx.DiGraph()
    genes = {
        "APP": "https://www.genecards.org/cgi-bin/carddisp.pl?gene=APP",
        "PSEN1": "https://www.genecards.org/cgi-bin/carddisp.pl?gene=PSEN1",
        "APOE": "https://www.genecards.org/cgi-bin/carddisp.pl?gene=APOE",
        "BACE1": "https://www.genecards.org/cgi-bin/carddisp.pl?gene=BACE1",
    }

    # Adding nodes and links to GeneBank
    for gene, link in genes.items():
        G.add_node(gene, url=link)

    # Add neuron clusters and lobes with assorted colors
    G.add_node("Neuron Cluster", color='cyan')
    G.add_node("Frontal Lobe", color='magenta')
    G.add_node("Temporal Lobe", color='yellow')
    G.add_node("Parietal Lobe", color='lightgreen')
    G.add_node("Occipital Lobe", color='orange')
    
    # Adding edges
    edges = [
        ("APP", "Alzheimer's Disease"),
        ("PSEN1", "Alzheimer's Disease"),
        ("APOE", "Alzheimer's Disease"),
        ("BACE1", "Alzheimer's Disease"),
        ("Neuron Cluster", "Frontal Lobe"),
        ("Neuron Cluster", "Temporal Lobe"),
        ("Neuron Cluster", "Parietal Lobe"),
        ("Neuron Cluster", "Occipital Lobe"),
        ("BACE1", "Neuron Cluster")
    ]
    
    G.add_edges_from(edges)

    pos = nx.spring_layout(G)

    edge_x = []
    edge_y = []
    for edge in G.edges():
        x0, y0 = pos[edge[0]]
        x1, y1 = pos[edge[1]]
        edge_x.append(x0)
        edge_x.append(x1)
        edge_x.append(None)
        edge_y.append(y0)
        edge_y.append(y1)
        edge_y.append(None)

    edge_trace = go.Scatter(
        x=edge_x, y=edge_y,
        line=dict(width=0.5, color='#888'),
        hoverinfo='none',
        mode='lines'
    )

    node_x = []
    node_y = []
    annotations = []
    for node in G.nodes():
        x, y = pos[node]
        node_x.append(x)
        node_y.append(y)
        annotations.append(dict(
            x=x, y=y, xref='x', yref='y',
            text=f"<a href='{genes.get(node, '#')}' target='_blank'>{node}</a>",
            showarrow=False,
            font=dict(color='black', size=10)
        ))

    node_trace = go.Scatter(
        x=node_x, y=node_y,
        mode='markers+text',
        text=list(G.nodes()),
        textposition="bottom center",
        hoverinfo='text',
        marker=dict(
            showscale=True,
            colorscale='YlGnBu',
            size=10,
            color=[G.nodes[node].get('color', 'blue') for node in G.nodes()],
        )
    )

    fig = go.Figure(data=[edge_trace, node_trace],
                    layout=go.Layout(
                        title='<br>Pathway Diagram for Alzheimer\'s Disease Treatment',
                        titlefont_size=16,
                        showlegend=False,
                        hovermode='closest',
                        margin=dict(b=0, l=0, r=0, t=40),
                        annotations=annotations,
                        xaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
                        yaxis=dict(showgrid=False, zeroline=False, showticklabels=False)
                    )
                    )
    return fig

# Display drug data as a table
drug_df_pd = drug_df.toPandas()
fig_drug_data = go.Figure(data=[go.Table(
    header=dict(values=list(drug_df_pd.columns),
                fill_color='paleturquoise',
                align='left'),
    cells=dict(values=[drug_df_pd[col] for col in drug_df_pd.columns],
               fill_color='lavender',
               align='left'))
])

# Display testing results as a table
fig_testing_results = go.Figure(data=[go.Table(
    header=dict(values=list(testing_results_df.columns),
                fill_color='paleturquoise',
                align='left'),
    cells=dict(values=[testing_results_df[col] for col in testing_results_df.columns],
               fill_color='lavender',
               align='left'))
])

# Create and display the pathway diagram
fig_pathway_diagram = create_pathway_diagram()

# Display all figures with a title
print("Inner Rx: Comprehensive dashboard to Alzheimer's Disease and Personalized Treatment")
fig_drug_data.show()
fig_testing_results.show()
fig_pathway_diagram.show()